
#containerr{
    font:14px normal Arial, sans-serif;
    color:#626771;
    background-color:#fff;
width:100%;
margin-top:-25px;
margin-left:-5px;
}

input[type=search]{
    text-align: left;
    border: none;
    padding: 12px 85px;
    font-size: 19px;
    box-shadow: 0 2px 4px #DDD;
    width: 100%;
height:63px;
    outline: none;
    display: block;
    color: #000000;
    margin: 0 auto 7px;
font-family:'roboto','sans-sarif';
}

td{
    list-style: none;
    display: inline-block;
    width: 100%;
    text-align: left;
height:auto;
}

td th {
    display: block;
    padding: 5px 5px;
    background-color: #f2f2f2;
    margin-bottom: 3px;
    height:120px;
    border-radius:7px;
    transition: 0.3s;
}

td th a{
height:110px;
    Width:100%;
    left: 10px;
    font-size: 12px;
    line-height: 16px;
    color: #000000;
   position:absolute;
}
td th a h2{
margin-top:-105px;
text-align:center;
}
td th a p{
margin-left:100px;
}
td th a img{
height:100%;
width:90px;
}
td th:hover{
    background-color:#d8f2f1;
}
// script



// Let's create a "real-time search" component

var SearchExample = React.createClass({

    getInitialState: function(){
        return { searchString: '' };
    },

    handleChange: function(e){

        // If you comment out this line, the text box will not change its value.
        // This is because in React, an input cannot change independently of the value
        // that was assigned to it. In our case this is this.state.searchString.

        this.setState({searchString:e.target.value});
    },

    render: function() {

        var libraries = this.props.items,
            searchString = this.state.searchString.trim().toLowerCase();


        if(searchString.length > 0){

            // We are searching. Filter the results.

            libraries = libraries.filter(function(l){
                return l.name.toLowerCase().match( searchString );
             
              
        
                
            });

        }

        return <div>
                    <input type="search"  value={this.state.searchString} onChange={this.handleChange} placeholder="Digite uma palavra" />

                    <td> 

                        { libraries.map(function(l){
                            return <th><a href={l.url}><img src={l.src}/><h2>{l.name}</h2><p>{l.description}</p></a></th>
                        }) }

                    </td>

                </div>;

    }
});

                                                                                                                                                             
var libraries = [

    {src:'https://d1di2lzuh97fh2.cloudfront.net/files/3w/3wg/3wgtbx.jpg?ph=762228e942', name: 'Backbone.js', description:'essa Ã© a descricao de cada card', url: 'https://documentcloud.github.io/backbone/'},
    {src:'https://762228e942.cbaul-cdnwnd.com/a39c552995a62183d70e3480929e57d4/200000010-8b6328b634/circulo-cruzado.svg?ph=762228e942', name: 'AngularJS', url: 'https://angularjs.org/'},
    { name: 'jQuery', url: 'https://jquery.com/'},
    { name: 'Prototype', url: 'https://www.prototypejs.org/'},
    { name: 'React', url: 'https://facebook.github.io/react/'},
    { name: 'Ember', url: 'https://emberjs.com/'},
    { name: 'Knockout.js', url: 'https://knockoutjs.com/'},
    { name: 'Dojo', url: 'https://dojotoolkit.org/'},
    { name: 'Mootools', url: 'https://mootools.net/'},
    { name: 'Underscore', url: 'https://documentcloud.github.io/underscore/'},
    { name: 'Lodash', url: 'https://lodash.com/'},
    { name: 'Moment', url: 'https://momentjs.com/'},
    { name: 'Express', url: 'https://expressjs.com/'},
    { name: 'Koa', url: 'https://koajs.com/'},

];

// Render the SearchExample component on the page

ReactDOM.render(
    <SearchExample items={ libraries } />,
    document.getElementById('containerr')
);
